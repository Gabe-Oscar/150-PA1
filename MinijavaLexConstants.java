/* Generated By:JavaCC: Do not edit this line. minijavaLexConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface minijavaLexConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 5;
  /** RegularExpression Id. */
  int LETTER = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int AND = 11;
  /** RegularExpression Id. */
  int LESS_THAN = 12;
  /** RegularExpression Id. */
  int PLUS = 13;
  /** RegularExpression Id. */
  int MINUS = 14;
  /** RegularExpression Id. */
  int MULTIPLY = 15;
  /** RegularExpression Id. */
  int CLASS = 16;
  /** RegularExpression Id. */
  int EXTENDS = 17;
  /** RegularExpression Id. */
  int PUBLIC = 18;
  /** RegularExpression Id. */
  int STATIC = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int MAIN = 21;
  /** RegularExpression Id. */
  int STRING = 22;
  /** RegularExpression Id. */
  int INT = 23;
  /** RegularExpression Id. */
  int RETURN = 24;
  /** RegularExpression Id. */
  int BOOLEAN = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int ELSE = 27;
  /** RegularExpression Id. */
  int WHILE = 28;
  /** RegularExpression Id. */
  int SYSTEM = 29;
  /** RegularExpression Id. */
  int DOT = 30;
  /** RegularExpression Id. */
  int OUT = 31;
  /** RegularExpression Id. */
  int PRINT = 32;
  /** RegularExpression Id. */
  int LENGTH = 33;
  /** RegularExpression Id. */
  int TRUE = 34;
  /** RegularExpression Id. */
  int FALSE = 35;
  /** RegularExpression Id. */
  int THIS = 36;
  /** RegularExpression Id. */
  int NEW = 37;
  /** RegularExpression Id. */
  int LPARENS = 38;
  /** RegularExpression Id. */
  int RPARENS = 39;
  /** RegularExpression Id. */
  int LBRACKET = 40;
  /** RegularExpression Id. */
  int RBRACKET = 41;
  /** RegularExpression Id. */
  int ASSIGN = 42;
  /** RegularExpression Id. */
  int SEMI_COMMA = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int NEGATE = 45;
  /** RegularExpression Id. */
  int L_C_BRACKET = 46;
  /** RegularExpression Id. */
  int R_C_BRACKET = 47;
  /** RegularExpression Id. */
  int IDENTIFIER = 48;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 49;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 50;
  /** RegularExpression Id. */
  int OTHER = 51;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\t\"",
    "\"\\r\"",
    "\" \"",
    "\"\\n\"",
    "<COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "<LETTER>",
    "<DIGIT>",
    "\"&&\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"class\"",
    "\"extends\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"String\"",
    "\"int\"",
    "\"return\"",
    "\"boolean\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"System\"",
    "\".\"",
    "\"out\"",
    "\"println\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\";\"",
    "\",\"",
    "\"!\"",
    "\"{\"",
    "\"}\"",
    "<IDENTIFIER>",
    "<INTEGER_LITERAL>",
    "<SINGLE_LINE_COMMENT>",
    "<OTHER>",
  };

}
